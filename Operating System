【概述】

1.基本特征

并发：同时运行多个程序
并行：同时执行多个指令（硬件上）

共享：系统中的资源可以被多个并发进程共同使用

虚拟：时分复用（时间片）和空分复用（地址空间）

异步：指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进

2.基本功能
进程管理；内存管理；文件管理；设备管理

3.系统调用
陷入内核（kernel）使用内核态功能

4.宏内核和微内核
只留下一个微内核工作在内核态，其他功能分离出来工作在用户态
频繁切换态，引起性能损失

5.中断分类
外中断；异常；陷入

【进程管理】

1.进程与线程

进程Process：是资源分配的基本单位，分配有资源
线程Thread： 是调度的基本单位，享有进程的资源

调度：从一个进程的线程切到另一个进程的线程时，会引起进程切换

开销：切换进程（内存空间，IO设备，CPU环境）远大于线程

通信：线程间直接读写同一进程中的数据进行通信，进程通信需要借助 IPC

2.进程状态切换

ready（就绪）（调度获得运行时间）running（运行）   （缺少除运行时间的资源）waiting（阻塞）

3.进程调度算法

批处理系统（保证吞吐量和周转时间）：先来先服务；短作业优先；最短剩余时间优先

交互式系统（保证交互能快速相应）：时间片轮转；优先级调度；多级反馈队列（多个优先级不同的队列进行时间片轮转）

实时系统：硬实时，软实时（有超时容忍）

4.进程同步

？？？对[临界资源]进行访问的那段代码称为临界区

同步：进程之间的制约关系
互斥：多个进程同时只能有一个进入临界区

？？？信号量：可做P，V操作，用来管理进程互斥

管程：一些独立出来的控制代码
insert() remove() wait() signal()

生产者消费者问题
哲学家进餐问题
读者写者问题

5.进程通信

传输进程同步所需的信息

管道：pipe()，用于进程通信，只支持半双工通信，只能在父子或兄弟间使用
FIFO：命名管道，去除了管道只能在父子进程中使用的限制
消息队列：

【死锁】

必要条件：
互斥：每个资源要么已经分配给了一个进程，要么就是可用的。
占有和等待：已经得到了某个资源的进程可以再请求新的资源。
不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。
环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。

处理方法：

1.鸵鸟策略

2.死锁检测与死锁恢复
检测：（单资源）dfs检测出环路既是死锁（多资源）检测没运行过的程序
恢复：抢占；回滚；杀死进程

3.死锁预防
破坏互斥条件；破坏占有和等待条件；破坏不可抢占条件；破坏环路等待

4.死锁避免
安全状态：能以某个调度次序使所有进程都运行完毕
检测安全状态：单资源银行家算法；多资源银行家算法

死锁检测与安全状态检测很像，都是尝试按一个顺序运行进程，如果有一个程序无法运行，则有死锁或不安全

【内存管理】

1.虚拟内存

地址空间→页→物理内存

虚拟内存即将页映射到了物理内存，且先产生逻辑地址，用到了再映射到物理内存，使得有限的内存也可以运行大程序

2. 分页系统地址映射

内存管理单元MMU： 页表page table： 页（地址空间）和页框（物理空间）的映射表

虚拟地址：页面号+偏移量，转换成页框（物理空间）

3.页面置换算法

发生缺页中断，将要访问的页面调入内存，调出一部分旧页面到磁盘对换区
页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）

最佳OPT：理论上，可以将最长时间不再访问的页面调出

最近最久未使用LRU：将历史上最久未访问的页面调出（链表头部），但需要维护一个链表实现

最近未使用NRU：优先换出被修改（脏）且最近没被使用的页面，利用状态位（R访问M修改）

先进先出FIFO：会将那些经常被访问的页面换出，导致缺页率升高

第二次机会算法：先将未被访问的调出，若访问过，则置入链表末端

时钟：利用环形链表，不用再移动页面

4.分段

把要使用地址空间的 表 划成段，一个段构成一个独立的地址空间。每个段的长度可以不同，并且可以动态增长

5.段页式？？？

6.分页与分段的比较

分页主要用于实现虚拟内存，从而获得更大的地址空间；
分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。

【设备管理】

磁盘调度算法

寻道时间是比较长的，主要优化这个

1.先来先服务FCFS

2.最短寻道时间优先SSTF
优先调度当前最近的磁道，但是可能出现饥饿现象，两端的磁道更容易出现

3.电梯算法（扫描算法）
总按一个方向运行

【链接】

1.编译系统： 预处理器       →      编译器    →    汇编器        →         链接器
	源程序	        修改的源程序         汇编程序        可重定位目标程序        可执行目标程序
 
2.静态链接：
符号解析（符号与符号定义关联起来） 重定位（符号定义与内存关联起来）

3.动态链接：

静态链接每个程序都要重链接，且浪费资源

共享库：.do / DLL
共享一个文件，且可以被不同进程共享