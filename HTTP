1.基础概念

请求和响应报文：请求方法，URL，协议版本，首部字段，内容主体
URI： URL + URN

2.HTTP方法

GET HEAD POST PATCH PUT DELETE（不带有验证机制）
OPTIONS CONNECT TRACE

3.状态码
在响应报文第一行，告知客户端请求结果
1xx 信息 2xx 成功 3xx 重定向 4xx 客户端错误 5xx 服务器错误

4.首部字段
通用，请求，响应，实体

5.具体应用

连接管理：短连接和长连接；流水线：不等待相应就多次请求

？？？Cookie：状态信息文件，用来标记客户端，存储用户数据；Session：服务器端存储的用户信息
Cookie与Session：数据复杂时考虑Session，但开销大，Cookie也可以加密

？？？缓存：
缓解服务器压力，降低延迟
代理服务器缓存或浏览器缓存

内容协商：
内容编码：
范围请求：
分块传输编码：
多部分对象集合：
虚拟主机：
通信数据转发：

6.HTTPS
HTTP的问题：使用明文，可能被窃听；不验证身份，可能伪装；无法证明报文完整性，可能遭篡改

HTTPS = HTTP + SSL + TCP 使用了隧道进行通信；加密，认证，完整性保护

HTTPS的问题：速度慢，支付证书费

加密：混合加密方式；利用非对称加密将私钥传给通信方，在用私钥进行数据传输

？？？认证：通过CA进行认证

？？？完整性保护：报文摘要功能

7.HTTP/2.0
HTTP/1.x的问题：需要多个连接才能并发；不会压缩首部；不支持资源优先级

？？？二进制分帧层：hearers帧和data帧，只有一个TCP连接存在

服务端推送：例如客户端请求 page.html 页面，服务端就把 script.js 和 style.css 等与之相关的资源一起发给客户端

首部压缩：不重传首部，也使用Huffman编码进行压缩

8.HTTP/1.1
默认是长连接；支持流水线；支持同时打开多个 TCP 连接；支持虚拟主机；新增状态码 100；
支持分块传输编码；新增缓存处理指令 max-ag

9.GET和POST比较

GET获取资源，POST传输实体

参数：GET参数在URL中，POST参数在实体主体中

安全：GET,HEAD,OPTIONS是安全的方法（不改变服务器状态，只可读），不安全的方法有POST,PUT,DELETE

幂等性：同样的方法执行一次和多次的效果是一样的
安全方法都是幂等的；DELETE也是幂等的，因为第一次删过了服务器状态不会再变了；POST不幂等

可缓存：GET 和 HEAD可缓存，但是 PUT 和 DELETE 不可缓存，POST 在多数情况下不可缓存的

XMLHttpRequest：
POST：先发HEADER再发Data
GET：一起发